name: üéõÔ∏è Orchestrated Data Pipeline

on:
  schedule:
    # Run daily at 2 AM UTC (Bronze), 2:30 AM UTC (Silver), 3 AM UTC (Gold)
    - cron: '0 2 * * *'  # Bronze layer - Raw data ingestion
    - cron: '30 2 * * *' # Silver layer - Tabular processing  
    - cron: '0 3 * * *'  # Gold layer - Analytics aggregation
  workflow_dispatch:
    inputs:
      layer:
        description: 'Which layer to process'
        required: true
        default: 'all'
        type: choice
        options:
          - 'all'
          - 'bronze'
          - 'silver'
          - 'gold'
      mode:
        description: 'Processing mode'
        required: true
        default: 'incremental'
        type: choice
        options:
          - 'incremental'
          - 'full'
          - 'songs_only'
      endpoint:
        description: 'Bronze: specific API endpoint (optional)'
        required: false
        default: 'all'
        type: choice
        options:
          - 'all'
          - 'setlists'
          - 'songs'
          - 'shows'
          - 'venues'
          - 'latest'
          - 'metadata'
          - 'links'
          - 'uploads'
          - 'appearances'
          - 'jamcharts'
      table_name:
        description: 'Silver: specific table to process (optional)'
        required: false
        default: ''
        type: string
      force_reprocess:
        description: 'Silver: force reprocess (reset flags)'
        required: false
        default: false
        type: boolean

env:
  SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
  SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}

jobs:
  # ============================================================================
  # JOB 1: BRONZE LAYER - Raw Data Ingestion
  # ============================================================================
  bronze-ingestion:
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule' || github.event.inputs.layer == 'all' || github.event.inputs.layer == 'bronze'
    outputs:
      success: ${{ steps.bronze-result.outputs.success }}
    steps:
      - name: ü•â Bronze Layer - Raw Data Ingestion
        id: bronze-result
        run: |
          echo "ü•â Starting Bronze layer processing..."
          
          # Call the existing ingest_raw_data function
          MODE="${{ github.event.inputs.mode || 'incremental' }}"
          ENDPOINT_INPUT="${{ github.event.inputs.endpoint || '' }}"

          if [ -n "$ENDPOINT_INPUT" ] && [ "$ENDPOINT_INPUT" != "all" ]; then
            echo "üéØ Filtering Bronze ingestion to endpoint: $ENDPOINT_INPUT"
            PAYLOAD="{\"endpoint\": \"$ENDPOINT_INPUT\", \"mode\": \"$MODE\"}"
          else
            PAYLOAD="{\"mode\": \"$MODE\"}"
          fi

          RESPONSE=$(curl -X POST \
            -H "Authorization: Bearer $SUPABASE_SERVICE_ROLE_KEY" \
            -H "Content-Type: application/json" \
            -d "$PAYLOAD" \
            "$SUPABASE_URL/functions/v1/ingest_raw_data")
          
          echo "Bronze layer response: $RESPONSE"
          
          # Check if successful
          if echo "$RESPONSE" | jq -e '.success == true' > /dev/null; then
            echo "‚úÖ Bronze layer completed successfully"
            echo "success=true" >> $GITHUB_OUTPUT
          else
            echo "‚ùå Bronze layer failed"
            echo "success=false" >> $GITHUB_OUTPUT
            exit 1
          fi

  # ============================================================================
  # JOB 2: SILVER LAYER - Tabular Processing
  # ============================================================================
  silver-processing:
    runs-on: ubuntu-latest
    needs: bronze-ingestion
    if: always() && (needs.bronze-ingestion.result == 'success' || github.event.inputs.layer == 'silver')
    outputs:
      success: ${{ steps.silver-result.outputs.success }}
    steps:
      - name: ü•à Silver Layer - Tabular Processing
        id: silver-result
        run: |
          echo "ü•à Starting Silver layer processing..."
          
          # Call the new process_tabular_data function for Silver only
          TABLE_NAME="${{ github.event.inputs.table_name || '' }}"
          FORCE="${{ github.event.inputs.force_reprocess || 'false' }}"

          if [ -n "$TABLE_NAME" ]; then
            echo "üéØ Processing specific Silver table: $TABLE_NAME (force=$FORCE)"
            PAYLOAD="{\"table_name\": \"$TABLE_NAME\", \"force_reprocess\": $FORCE}"
          else
            echo "üéØ Processing all Silver tables (force=$FORCE)"
            PAYLOAD="{\"mode\": \"silver_only\", \"force_reprocess\": $FORCE}"
          fi

          RESPONSE=$(curl -X POST \
            -H "Authorization: Bearer $SUPABASE_SERVICE_ROLE_KEY" \
            -H "Content-Type: application/json" \
            -d "$PAYLOAD" \
            "$SUPABASE_URL/functions/v1/process_tabular_data")
          
          echo "Silver layer response: $RESPONSE"
          
          # Check if successful
          if echo "$RESPONSE" | jq -e '.success == true' > /dev/null; then
            echo "‚úÖ Silver layer completed successfully"
            echo "success=true" >> $GITHUB_OUTPUT
          else
            echo "‚ùå Silver layer failed"
            echo "success=false" >> $GITHUB_OUTPUT
            exit 1
          fi

  # ============================================================================
  # JOB 3: GOLD LAYER - Analytics Aggregation
  # ============================================================================
  gold-aggregation:
    runs-on: ubuntu-latest
    needs: silver-processing
    if: always() && (needs.silver-processing.result == 'success' || github.event.inputs.layer == 'gold')
    outputs:
      success: ${{ steps.gold-result.outputs.success }}
    steps:
      - name: ü•á Gold Layer - Analytics Aggregation
        id: gold-result
        run: |
          echo "ü•á Starting Gold layer processing..."
          
          # Call the new process_tabular_data function for Gold only
          RESPONSE=$(curl -X POST \
            -H "Authorization: Bearer $SUPABASE_SERVICE_ROLE_KEY" \
            -H "Content-Type: application/json" \
            -d '{"mode": "gold_only"}' \
            "$SUPABASE_URL/functions/v1/process_tabular_data")
          
          echo "Gold layer response: $RESPONSE"
          
          # Check if successful
          if echo "$RESPONSE" | jq -e '.success == true' > /dev/null; then
            echo "‚úÖ Gold layer completed successfully"
            echo "success=true" >> $GITHUB_OUTPUT
          else
            echo "‚ùå Gold layer failed"
            echo "success=false" >> $GITHUB_OUTPUT
            exit 1
          fi

  # ============================================================================
  # JOB 4: COMPLETE PIPELINE - All Layers
  # ============================================================================
  complete-pipeline:
    runs-on: ubuntu-latest
    if: github.event.inputs.layer == 'all' || (github.event_name == 'schedule' && github.event.schedule == '0 3 * * *')
    steps:
      - name: üéõÔ∏è Complete Pipeline - All Layers
        run: |
          echo "üéõÔ∏è Starting complete data pipeline..."
          
          # Determine mode based on input
          MODE="${{ github.event.inputs.mode || 'incremental' }}"
          echo "üéØ Processing mode: $MODE"
          
          # Call the process_tabular_data function
          RESPONSE=$(curl -X POST \
            -H "Authorization: Bearer $SUPABASE_SERVICE_ROLE_KEY" \
            -H "Content-Type: application/json" \
            -d "{\"mode\": \"$MODE\"}" \
            "$SUPABASE_URL/functions/v1/process_tabular_data")
          
          echo "Pipeline response: $RESPONSE"
          
          # Check if successful
          if echo "$RESPONSE" | jq -e '.success == true' > /dev/null; then
            echo "‚úÖ Pipeline completed successfully"
            
            # Extract and display summary
            echo "üìä Pipeline Summary:"
            echo "$RESPONSE" | jq '.summary'
            
            # Show mode-specific results
            if [ "$MODE" = "songs_only" ]; then
              echo "üéµ Songs-only mode results:"
              echo "$RESPONSE" | jq '.bronze_to_silver'
            fi
          else
            echo "‚ùå Pipeline failed"
            exit 1
          fi

  # ============================================================================
  # JOB 5: MONITORING & ALERTS
  # ============================================================================
  monitoring:
    runs-on: ubuntu-latest
    needs: [bronze-ingestion, silver-processing, gold-aggregation]
    if: always()
    steps:
      - name: üìä Pipeline Monitoring
        run: |
          echo "üìä Pipeline Status Summary:"
          echo "Bronze Layer: ${{ needs.bronze-ingestion.result }}"
          echo "Silver Layer: ${{ needs.silver-processing.result }}"
          echo "Gold Layer: ${{ needs.gold-aggregation.result }}"
          
          # Check if any layer failed
          if [[ "${{ needs.bronze-ingestion.result }}" == "failure" || 
                "${{ needs.silver-processing.result }}" == "failure" || 
                "${{ needs.gold-aggregation.result }}" == "failure" ]]; then
            echo "‚ö†Ô∏è One or more pipeline layers failed!"
            # Here you could add Slack/Discord/email notifications
          else
            echo "‚úÖ All pipeline layers completed successfully!"
          fi
